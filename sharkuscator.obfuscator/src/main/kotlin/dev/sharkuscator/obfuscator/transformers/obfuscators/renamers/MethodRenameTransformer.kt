package dev.sharkuscator.obfuscator.transformers.obfuscators.renamers

import dev.sharkuscator.obfuscator.ObfuscatorServices
import dev.sharkuscator.obfuscator.configuration.GsonConfiguration
import dev.sharkuscator.obfuscator.configuration.transformers.RenameConfiguration
import dev.sharkuscator.obfuscator.dictionaries.DictionaryFactory
import dev.sharkuscator.obfuscator.dictionaries.MappingDictionary
import dev.sharkuscator.obfuscator.events.TransformerEvents
import dev.sharkuscator.obfuscator.extensions.*
import dev.sharkuscator.obfuscator.transformers.BaseTransformer
import dev.sharkuscator.obfuscator.transformers.TransformerPriority
import dev.sharkuscator.obfuscator.transformers.TransformerStrength
import meteordevelopment.orbit.EventHandler
import org.mapleir.asm.ClassNode

object MethodRenameTransformer : BaseTransformer<RenameConfiguration>("MethodRename", RenameConfiguration::class.java) {
    private val disallowedInterfacePatterns = listOf("com.sun.jna.*".toRegex())
    private val classToRemappedDescriptors = mutableMapOf<ClassNode, MutableSet<String>>()
    lateinit var methodMappingDictionary: MappingDictionary<ClassNode>

    override fun initialization(configuration: GsonConfiguration): RenameConfiguration {
        methodMappingDictionary = DictionaryFactory.createDictionary(super.initialization(configuration).dictionary)
        return this.configuration
    }

    @EventHandler
    @Suppress("unused")
    private fun onMethodTransform(event: TransformerEvents.MethodTransformEvent) {
        if (!isEligibleForExecution() || exclusions.excluded(event.anytypeNode) || event.anytypeNode.isNative || event.anytypeNode.shouldSkipTransform()) {
            return
        }

        val targetClassNode = event.anytypeNode.owner
        if (event.obfuscationContext.isInputRecognizedAsMinecraftMod && (event.anytypeNode.isMixinAccessor() || event.anytypeNode.name.startsWith("func_"))) {
            return
        }

        if (targetClassNode.isDeclaredAsAnnotation() || ObfuscatorServices.symbolRemapper.symbolMappings.containsKey(event.anytypeNode.getQualifiedName())) {
            return
        }

        if (targetClassNode.node.interfaces.any { className -> disallowedInterfacePatterns.any { it.matches(className) } }) {
            return
        }

        val targetClassDescriptors = classToRemappedDescriptors.computeIfAbsent(targetClassNode) { mutableSetOf() }
//        val currentParameterDescriptor = event.anytypeNode.desc.substringAfter("(").substringBefore(")")

        val methodHierarchyRoot = event.obfuscationContext.hierarchyProvider.getRootMethodNode(event.anytypeNode)
        if (methodHierarchyRoot != null) {
            if (event.obfuscationContext.classSource.isLibraryClass(methodHierarchyRoot.owner.name) || methodHierarchyRoot.owner.isAutoGenerated()) {
                return
            }

            val rootOwnerDescriptors = classToRemappedDescriptors.computeIfAbsent(methodHierarchyRoot.owner) { mutableSetOf() }
            val methodMapping = ObfuscatorServices.symbolRemapper.symbolMappings[methodHierarchyRoot.getQualifiedName()] ?: "${configuration.namePrefix}${methodMappingDictionary.generateNextName(event.anytypeNode.owner)}".also {
                ObfuscatorServices.symbolRemapper.setMapping(methodHierarchyRoot.getQualifiedName(), it)
                rootOwnerDescriptors.add(methodHierarchyRoot.desc)
            }

            ObfuscatorServices.symbolRemapper.setMapping(event.anytypeNode.getQualifiedName(), methodMapping)
            targetClassDescriptors.add(event.anytypeNode.desc)
        } else {
            val methodMapping = "${configuration.namePrefix}${methodMappingDictionary.generateNextName(event.anytypeNode.owner)}"
            ObfuscatorServices.symbolRemapper.setMapping(event.anytypeNode.getQualifiedName(), methodMapping)
            targetClassDescriptors.add(event.anytypeNode.desc)
        }
    }

    override fun transformerStrength(): TransformerStrength {
        return TransformerStrength.MODERATE
    }

    override fun executionPriority(): Int {
        return TransformerPriority.TWENTY_FIVE
    }
}
