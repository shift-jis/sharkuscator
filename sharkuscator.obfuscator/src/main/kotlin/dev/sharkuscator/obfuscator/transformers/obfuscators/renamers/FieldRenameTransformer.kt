package dev.sharkuscator.obfuscator.transformers.obfuscators.renamers

import dev.sharkuscator.obfuscator.ObfuscatorServices
import dev.sharkuscator.obfuscator.configuration.GsonConfiguration
import dev.sharkuscator.obfuscator.configuration.transformers.RenameConfiguration
import dev.sharkuscator.obfuscator.dictionaries.DictionaryFactory
import dev.sharkuscator.obfuscator.dictionaries.MappingDictionary
import dev.sharkuscator.obfuscator.events.TransformerEvents
import dev.sharkuscator.obfuscator.extensions.getQualifiedName
import dev.sharkuscator.obfuscator.extensions.isAutoGenerated
import dev.sharkuscator.obfuscator.transformers.BaseTransformer
import dev.sharkuscator.obfuscator.transformers.TransformerPriority
import dev.sharkuscator.obfuscator.transformers.TransformerStrength
import meteordevelopment.orbit.EventHandler
import org.mapleir.asm.ClassNode

object FieldRenameTransformer : BaseTransformer<RenameConfiguration>("FieldRename", RenameConfiguration::class.java) {
    private val disallowedInterfacePatterns = listOf("com.sun.jna.*".toRegex())
    lateinit var fieldMappingDictionary: MappingDictionary<ClassNode>

    override fun initialization(configuration: GsonConfiguration): RenameConfiguration {
        fieldMappingDictionary = DictionaryFactory.createDictionary(super.initialization(configuration).dictionary)
        return this.configuration
    }

    @EventHandler
    @Suppress("unused")
    private fun onFieldTransform(event: TransformerEvents.FieldTransformEvent) {
        if (!isEligibleForExecution() || !shouldTransformField(event.obfuscationContext, event.anytypeNode) || disallowedInterfacePatterns.any { it.matches(event.anytypeNode.owner.node.superName) }) {
            return
        }

        val targetClassNode = event.anytypeNode.owner
        if (event.obfuscationContext.classSource.isLibraryClass(targetClassNode.name) || targetClassNode.isAutoGenerated() || targetClassNode.isEnum) {
            return
        }

        if (event.obfuscationContext.isInputRecognizedAsMinecraftMod && event.anytypeNode.name.startsWith("field_")) {
            return
        }

        val fieldMapping = "${configuration.namePrefix}${fieldMappingDictionary.generateNextName(event.anytypeNode.owner)}"
        ObfuscatorServices.symbolRemapper.setMapping(event.anytypeNode.getQualifiedName(), fieldMapping)
    }

    override fun transformerStrength(): TransformerStrength {
        return TransformerStrength.MODERATE
    }

    override fun executionPriority(): Int {
        return TransformerPriority.TWENTY_FIVE
    }
}
