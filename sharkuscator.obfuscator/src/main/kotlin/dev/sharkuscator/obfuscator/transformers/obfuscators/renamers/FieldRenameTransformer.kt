package dev.sharkuscator.obfuscator.transformers.obfuscators.renamers

import dev.sharkuscator.obfuscator.ObfuscatorServices
import dev.sharkuscator.obfuscator.configuration.GsonConfiguration
import dev.sharkuscator.obfuscator.configuration.transformers.FieldRenameConfiguration
import dev.sharkuscator.obfuscator.dictionaries.DictionaryFactory
import dev.sharkuscator.obfuscator.dictionaries.MappingDictionary
import dev.sharkuscator.obfuscator.events.TransformerEvents
import dev.sharkuscator.obfuscator.extensions.getQualifiedName
import dev.sharkuscator.obfuscator.extensions.isAutoGenerated
import dev.sharkuscator.obfuscator.transformers.BaseTransformer
import dev.sharkuscator.obfuscator.transformers.TransformerPriority
import meteordevelopment.orbit.EventHandler
import org.mapleir.asm.ClassNode
import org.objectweb.asm.Type

object FieldRenameTransformer : BaseTransformer<FieldRenameConfiguration>("FieldRename", FieldRenameConfiguration::class.java) {
    private val badInterfaces = listOf("com.sun.jna.*".toRegex())
    lateinit var dictionary: MappingDictionary<ClassNode>
    lateinit var excludeAnnotations: List<Regex>

    override fun initialization(configuration: GsonConfiguration): FieldRenameConfiguration {
        dictionary = DictionaryFactory.createDictionary(super.initialization(configuration).dictionary)
        excludeAnnotations = this.configuration.excludeAnnotations.map { Regex(it) }
        return this.configuration
    }

    @EventHandler
    @Suppress("unused")
    private fun onFieldTransform(event: TransformerEvents.FieldTransformEvent) {
        if (transformed || exclusions.excluded(event.anytypeNode) || badInterfaces.any { it.matches(event.anytypeNode.owner.node.superName) }) {
            return
        }

        val classNode = event.anytypeNode.owner
        if (event.context.classSource.isLibraryClass(classNode.name) || classNode.isAutoGenerated()) {
            return
        }

        if (event.anytypeNode.node.visibleAnnotations?.any { annot -> excludeAnnotations.any { it.matches(Type.getType(annot.desc).internalName) } } ?: false) {
            return
        }

        if (event.context.isInputRecognizedAsMinecraftMod && event.anytypeNode.name.startsWith("field_")) {
            return
        }

        val fieldMapping = "${configuration.namePrefix}${dictionary.generateNextName(event.anytypeNode.owner)}"
        ObfuscatorServices.symbolRemapper.setMapping(event.anytypeNode.getQualifiedName(), fieldMapping)
    }

    override fun getExecutionPriority(): Int {
        return TransformerPriority.TWENTY_FIVE
    }
}
